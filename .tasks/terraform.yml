# .tasks/terraform.yml
# Terraform specific tasks

version: "3"

vars:
  TF_LOG_LEVEL: '{{.TF_LOG_LEVEL | default "ERROR"}}'
  TF_DATA_DIR: .terraform

tasks:
  fmt:
    desc: Format all Terraform files
    cmds:
      - |
        echo "Formatting Terraform code..."
        terraform fmt -recursive
        echo "Code formatted"

  fmt-check:
    desc: Check if Terraform files are formatted
    cmds:
      - |
        echo "Checking Terraform formatting..."
        if ! terraform fmt -check -recursive; then
          echo "ERROR: Code is not properly formatted. Run 'task terraform:fmt' to fix."
          exit 1
        fi
        echo "Code is properly formatted"

  validate-all:
    desc: Validate all Terraform configurations
    cmds:
      - |
        echo "Validating all Terraform configurations..."

        # Validate modules (if they exist)
        if [ -d "modules/" ]; then
          for dir in $(find modules/ -name "*.tf" -exec dirname {} \; | sort -u); do
            echo "Validating $dir..."
            (cd "$dir" && terraform init -backend=false && terraform validate)
          done
        else
          echo "No modules/ directory found, skipping module validation"
        fi

        # Validate stacks (if they exist)
        if [ -d "stacks/" ]; then
          for dir in $(find stacks/ -name "*.tfstack.hcl" -exec dirname {} \; | sort -u); do
            echo "Validating $dir..."
            (cd "$dir" && terraform init -backend=false && terraform validate)
          done
        else
          echo "No stacks/ directory found, skipping stack validation"
        fi

        # Validate environments (if they exist)
        if [ -d "environments/" ]; then
          for dir in $(find environments/ -name "*.tf" -exec dirname {} \; | sort -u); do
            echo "Validating $dir..."
            (cd "$dir" && terraform init -backend=false && terraform validate)
          done
        else
          echo "No environments/ directory found, skipping environment validation"
        fi

        echo "All configurations validated"

  init:
    desc: Initialize Terraform
    cmds:
      - terraform init {{.CLI_ARGS}}

  plan:
    desc: Create execution plan
    cmds:
      - terraform plan {{.CLI_ARGS}}

  apply:
    desc: Apply the configuration
    cmds:
      - terraform apply {{.CLI_ARGS}}

  destroy:
    desc: Destroy infrastructure
    cmds:
      - terraform destroy {{.CLI_ARGS}}

  clean:
    desc: Clean Terraform cache and state
    cmds:
      - |
        echo "Cleaning Terraform cache..."
        find . -type d -name ".terraform" -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.tfstate.backup" -delete 2>/dev/null || true
        find . -name ".terraform.lock.hcl" -delete 2>/dev/null || true
        echo "Terraform cache cleaned"

  ws-new:
    desc: Create new workspace
    cmds:
      - terraform workspace new {{.WORKSPACE}}

  ws-select:
    desc: Select workspace
    cmds:
      - terraform workspace select {{.WORKSPACE}}

  ws-list:
    desc: List workspaces
    cmds:
      - terraform workspace list

  ws-delete:
    desc: Delete workspace
    cmds:
      - terraform workspace delete {{.WORKSPACE}}

  state-list:
    desc: List state resources
    cmds:
      - terraform state list

  state-show:
    desc: Show resource from state
    cmds:
      - terraform state show {{.RESOURCE}}

  state-move:
    desc: Move resource in state
    cmds:
      - terraform state mv {{.SOURCE}} {{.DESTINATION}}

  state-remove:
    desc: Remove resource from state
    cmds:
      - terraform state rm {{.RESOURCE}}

  refresh:
    desc: Refresh state
    cmds:
      - terraform refresh {{.CLI_ARGS}}

  show-output:
    desc: Show outputs
    cmds:
      - terraform output {{.CLI_ARGS}}

  console:
    desc: Interactive console
    cmds:
      - terraform console

  show-version:
    desc: Show Terraform version
    cmds:
      - terraform version

  show-providers:
    desc: Show provider requirements
    cmds:
      - terraform providers
