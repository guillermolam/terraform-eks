# .tasks/security.yml
# Security tasks for EKS Zero-Trust project

version: "3"

vars:
  CHECKOV_CONFIG: .checkov.yaml
  TRIVY_CONFIG: .trivy.yaml
  TFSEC_CONFIG: .tfsec.yml

tasks:
  scan-all:
    desc: Run all security scans
    cmds:
      - trunk check --filter=checkov,trivy,tfsec,bandit,semgrep,gitleaks,trufflehog,osv-scanner
      - echo "All security scans completed"

  scan-code:
    desc: Scan Terraform code for security issues
    cmds:
      - |
        echo "Running Terraform security scans..."
        trunk check --filter=checkov,tfsec,tflint .
        echo "Code security scan completed"

  vulnerability-scan:
    desc: Scan for vulnerabilities
    cmds:
      - |
        echo "Running vulnerability scans..."
        trunk check --filter=trivy,osv-scanner .
        echo "Vulnerability scan completed"

  secret-scan:
    desc: Scan for secrets and sensitive data
    cmds:
      - |
        echo "Scanning for secrets..."
        trunk check --filter=gitleaks,trufflehog .
        echo "Secret scan completed"

  policy-validate:
    desc: Validate security policies
    cmds:
      - |
        echo "Validating security policies..."
        # Validate OPA policies
        if command -v opa >/dev/null 2>&1 && [ -d "policies/opa" ]; then
          echo "Validating OPA policies..."
          find policies/opa/ -name "*.rego" -exec opa fmt --diff {} \;
          find policies/opa/ -name "*.rego" -exec opa test {} \;
        fi

        # Validate Sentinel policies
        if command -v sentinel >/dev/null 2>&1 && [ -d "policies/sentinel" ]; then
          echo "Validating Sentinel policies..."
          find policies/sentinel/ -name "*.sentinel" -exec sentinel fmt {} \;
        fi

        echo "Policy validation completed"

  network-scan:
    desc: Scan network configurations
    cmds:
      - |
        echo "Scanning network configurations..."
        # Check for open security groups
        if grep -r "0.0.0.0/0" --include="*.tf" modules/; then
          echo "WARNING: Found potential open security groups"
        fi

        # Check for proper network segmentation
        echo "Validating network segmentation..."
        python3 scripts/security/validate-network-segmentation.py

        echo "Network scan completed"

  container-scan:
    desc: Scan container images and Kubernetes manifests
    cmds:
      - |
        echo "Scanning containers and Kubernetes manifests..."
        if command -v trivy >/dev/null 2>&1; then
          # Scan Kubernetes manifests
          find manifests/ -name "*.yaml" -exec trivy config {} \;
        fi

        # Validate pod security standards
        if command -v kubectl >/dev/null 2>&1; then
          echo "Validating pod security standards..."
          find manifests/ -name "*.yaml" -exec kubectl --dry-run=client apply -f {} \;
        fi

        echo "Container scan completed"

  iam-analysis:
    desc: Analyze IAM permissions
    cmds:
      - |
        echo "Analyzing IAM permissions..."
        # Check for overly permissive policies
        echo "Checking for overly permissive IAM policies..."
        if grep -r "\*" --include="*.json" modules/security/iam/policies/; then
          echo "WARNING: Found wildcard permissions in IAM policies"
        fi

        # Validate least privilege principle
        echo "Validating least privilege principle..."
        python3 scripts/security/validate-iam-least-privilege.py

        echo "IAM analysis completed"

  encryption-check:
    desc: Verify encryption configurations
    cmds:
      - |
        echo "Verifying encryption configurations..."
        # Check for encryption at rest
        echo "Checking encryption at rest..."
        if ! grep -r "encrypted.*=.*true" --include="*.tf" modules/; then
          echo "WARNING: Some resources may not have encryption at rest enabled"
        fi

        # Check for encryption in transit
        echo "Checking encryption in transit..."
        python3 scripts/security/validate-encryption.py

        echo "Encryption check completed"

  threat-model:
    desc: Generate threat model
    cmds:
      - |
        echo "Generating threat model..."
        # Analyze attack surface
        echo "Analyzing attack surface..."
        python3 scripts/security/analyze-attack-surface.py

        # Generate threat matrix
        echo "Generating threat matrix..."
        python3 scripts/security/generate-threat-matrix.py

        echo "Threat model generated in docs/security/threat-model.md"

  baseline-check:
    desc: Check against security baseline
    cmds:
      - |
        echo "Checking against security baseline..."
        # Check CIS benchmarks
        if command -v kube-bench >/dev/null 2>&1; then
          echo "Running CIS Kubernetes benchmark..."
          kube-bench --config-dir /etc/kube-bench/cfg --config /etc/kube-bench/cfg/config.yaml
        fi

        # Check AWS security baseline
        echo "Checking AWS security baseline..."
        python3 scripts/security/check-aws-baseline.py

        echo "Security baseline check completed"

  incident-response:
    desc: Validate incident response procedures
    cmds:
      - |
        echo "Validating incident response procedures..."
        # Check monitoring and alerting
        echo "Validating monitoring and alerting..."
        if [ ! -f "manifests/monitoring/alertmanager/alertmanager-config.yaml" ]; then
          echo "ERROR: AlertManager configuration not found"
          exit 1
        fi

        # Validate runbooks
        echo "Validating runbooks..."
        for runbook in docs/security/incident-response/*.md; do
          if [ -f "$runbook" ]; then
            echo "Checking runbook: $runbook"
            # Basic validation of runbook structure
            if ! grep -q "## Overview" "$runbook"; then
              echo "WARNING: Runbook $runbook missing Overview section"
            fi
          fi
        done

        echo "Incident response validation completed"

  penetration-test:
    desc: Run penetration testing tools
    cmds:
      - |
        echo "Running penetration testing tools..."
        # Run kube-hunter if available
        if command -v kube-hunter >/dev/null 2>&1; then
          echo "Running kube-hunter..."
          kube-hunter --remote --quick
        fi

        # Run basic security tests
        echo "Running basic security tests..."
        python3 scripts/security/basic-pentest.py

        echo "Penetration testing completed"

  zero-trust-validate:
    desc: Validate zero-trust implementation
    cmds:
      - |
        echo "Validating zero-trust implementation..."
        # Check network policies
        echo "Validating network policies..."
        if [ ! -d "manifests/security/network-policies" ]; then
          echo "ERROR: Network policies directory not found"
          exit 1
        fi

        # Check pod security standards
        echo "Validating pod security standards..."
        if ! grep -r "pod-security.kubernetes.io" manifests/security/pod-security/; then
          echo "ERROR: Pod security standards not properly configured"
          exit 1
        fi

        # Check RBAC configuration
        echo "Validating RBAC configuration..."
        if [ ! -d "manifests/security/rbac" ]; then
          echo "ERROR: RBAC configuration not found"
          exit 1
        fi

        echo "Zero-trust validation completed"

  security-report:
    desc: Generate comprehensive security report
    cmds:
      - |
        echo "Generating security report..."
        REPORT_DIR="reports/security/$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$REPORT_DIR"

        # Run all scans and collect results
        task security:scan-code > "$REPORT_DIR/code-scan.txt" 2>&1 || true
        task security:vulnerability-scan > "$REPORT_DIR/vulnerability-scan.txt" 2>&1 || true
        task security:compliance-check > "$REPORT_DIR/compliance-check.txt" 2>&1 || true
        task security:secret-scan > "$REPORT_DIR/secret-scan.txt" 2>&1 || true

        # Generate summary report
        python3 scripts/security/generate-security-report.py "$REPORT_DIR"

        echo "Security report generated in $REPORT_DIR"

  update-baselines:
    desc: Update security baselines
    cmds:
      - |
        echo "Updating security baselines..."
        # Update secrets baseline
        if command -v detect-secrets >/dev/null 2>&1; then
          detect-secrets scan --update .secrets.baseline
        fi

        # Update security policy baselines
        if [ -d "policies/checkov/suppressions" ]; then
          echo "Reviewing Checkov suppressions..."
          find policies/checkov/suppressions/ -name "*.yaml" -mtime +30 -exec echo "WARNING: Suppression file {} is older than 30 days" \;
        fi

        echo "Security baselines updated"
